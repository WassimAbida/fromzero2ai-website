[pylava]
format = pylint
linters = pycodestyle,pydocstyle,pylint
skip = .*,.*/*,*__pycache__/*
ignore = C0111,E0211,E0602,D203,D213,D204,D400,D407,D415,W1203,E203

# C0111: `pylint` lint already covered by `pydocstyle`.
# E0211: `pylint` lint already covered by `mypy`.
# E0602: `pylint` lint already covered by `mypy`.
# D203: Conflicting with D211, one MUST be disabled.
# D213: Conflicting with D212, one MUST be disabled.

# D204: Was forcing us a newline after class docstring.
# W1203: Was forcing '%' formating in logging, which is not what we want.

# D407: Bad format in sphinx documentation
# D415: Useless and not pertinent
# D400: Similar rule as D415

[pylava:pydocstyle]

[pylava:pycodestyle]
# Set the maximum line length to the same as `pylint`.
max_line_length = 120

[pylava:pylint]
# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use.
# jobs = 0

# Clear disabled lint list, because `pylava` disables some by default.
disable =

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format = LF

# Maximum number of characters on a single line.
max-line-length = 120

# This flag controls whether inconsistent-quotes generates a warning when the
# character used as a quote delimiter is used inconsistently within a module.
check-quote-consistency = yes

# This flag controls whether the implicit-str-concat should generate a warning
# on implicit string concatenation in sequences defined over several lines.
check-str-concat-over-line-jumps = yes

# Bad variable names which should always be refused, separated by a comma.
bad-names = foo,bar,baz,toto,tutu,tata,titi,riri,fifi,loulou

# Good variable names which should always be accepted, separated by a comma.
good-names = i,j,k,ex,Run,_,ro,rw,T

# Include a hint for the correct naming format with invalid-name.
include-naming-hint = yes

# Maximum number of arguments for function / method.
max-args = 7

# Maximum number of attributes for a class (see R0902).
max-attributes = 9

# Maximum number of parents for a class (see R0901).
max-parents = 12

# Minimum number of public methods for a class (see R0903).
min-public-methods = 1

# Allow some C extensions
extension-pkg-whitelist = cv2,mypy,pydantic,ujson

[mypy]
# Exclude filenames starting by a '.' and `__pycache__` dirs.
exclude = "\..*|.*__pycache__"

# Shows error codes, column number and context in error messages.
show_error_codes = True
show_error_context = True
show_column_numbers = True

# By default, imported values to a module are treated as exported and mypy allows other modules to import them.
# This flag changes the behavior to not re-export unless the item is imported using from-as or is included in __all__.
no_implicit_reexport = True

# Prohibit equality checks, identity checks, and container checks between non-overlapping types.
strict_equality = True

# Ignore missing imports errors when importing third-party modules.
ignore_missing_imports = True
follow_imports = normal

# Disallows defining functions without type annotations or with incomplete type annotations.
disallow_incomplete_defs = True
disallow_untyped_calls = True
disallow_untyped_defs = True
allow_untyped_globals = False

# Disallows explicit Any in type positions such as type annotations and generic type parameters.
disallow_any_generics = True
disallow_any_explicit = True

# Type-checks the interior of functions without type annotations.
check_untyped_defs = True

# Enables strict Optional checks. If False, mypy treats None as compatible with every type.
no_implicit_optional = True
strict_optional = True

# Shows errors for missing return statements on some execution paths.
warn_no_return = False
#                ^ already covered by `pylint`

# Shows a warning when encountering any code inferred to be unreachable or redundant after performing type analysis.
warn_unreachable = False
#                  ^ already covered by `pylint`

# This flag will make mypy report an error whenever your code uses an unnecessary cast that can safely be removed.
warn_redundant_casts = True

# This flag will make mypy report an error whenever your code uses a # type: ignore
# comment on a line that is not actually generating an error message.
warn_unused_ignores = True

# This flag causes mypy to generate a warning when returning a value with
# type Any from a function declared with a non-Any return type.
warn_return_any = True

# Allows variables to be redefined with an arbitrary type, as long as the redefinition is in the same block and nesting level as the original definition.
allow_redefinition = True

# Enable mypy optional plugins, for now enable `pydantic`, sql.
plugins = pydantic.mypy,sqlmypy

[mypy-torch.*]
# Fix mypy errors on torch attributes
follow_imports = skip
follow_imports_for_stubs = True

[pydantic-mypy]
# If enabled, disallow extra arguments to the __init__ call even when Config.extra is not "forbid".
init_forbid_extra = True

# If enabled, include the field types as type hints in the generated signature for the __init__ method.
init_typed = True

# If enabled, raise a mypy error whenever a model is created for which calls to its __init__
# or construct methods require the use of aliases that cannot be statically determined.
# This is the case, for example, if allow_population_by_field_name=False
# and the model uses an alias generator.
#warn_required_dynamic_aliases = True

# If enabled, raise a mypy error whenever a field is declared on a model without explicitly specifying its type.
warn_untyped_fields = True

[isort]
line_length=120
combine_as_imports=true
profile=black
sections=FUTURE,STDLIB,THIRDPARTY,JSKHELPERS,FIRSTPARTY,LOCALFOLDER
known_jskhelpers=jsk_shared_apihelpers_lib_py,jsk_shared_confighelpers_lib_py,jsk_shared_filterhelpers_lib_py

# Black formatter doesn't use setup.cfg settings file but only pyproject.toml file, which we cannot use here.
# Black settings are passed directly to fmt and lint commands in __init__.py file.
#
# __black_options = ["--line-length=120", "--target-version=py39", "--skip-string-normalization"]
